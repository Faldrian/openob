<!DOCTYPE html>
<html lang="en">
  <head>
    <title>OpenOB WebUI</title>
    <link rel="stylesheet" href="${request.static_url('webui:static/bootstrap.min.css')}" type="text/css" media="screen" charset="utf-8" />
    <link rel="stylesheet" href="${request.static_url('webui:static/global.css')}" type="text/css" media="screen" charset="utf-8" />
    <script language="javascript" type="text/javascript" src="${request.static_url('webui:static/jquery-1.7.1.min.js')}"></script>
    <script language="javascript" type="text/javascript" src="${request.static_url('webui:static/jquery.sparkline.min.js')}"></script>
  </head>
  <body>
    <div id="container">
      <div id="header">
        <a href="/">OpenOB</a>
      </div>
      <div id="content">
        <div id="status">
          <h1>Link Status</h1>
          <h3>Transmitter</h3>
          <div id="tx_meters" class="meterbridge">
            <div class="meter">
              RMS L <div class="meter_value" id="tx_rms_left_meter"></div><span class="spark" id="tx_rms_left"></span>
            </div>
            <div class="meter">
              RMS R <div class="meter_value" id="tx_rms_right_meter"></div><span class="spark" id="tx_rms_right"></span>
            </div>
            <div class="progress realmeter progress-success"><div id="tx_rms_left_mbar" class="bar" style="width:0%;"></div></div>
            <div class="progress realmeter progress-danger"><div id="tx_rms_right_mbar" class="bar" style="width:0%;"></div></div>
            <div class="meter">
              Peak L <div class="meter_value" id="tx_peak_left_meter"></div><span class="spark" id="tx_peak_left"></span>
            </div>
            <div class="meter">
              Peak R <div class="meter_value" id="tx_peak_right_meter"></div><span class="spark" id="tx_peak_right"></span>
            </div>
            <div class="progress realmeter progress-success"><div id="tx_peak_left_mbar" class="bar" style="width:0%;"></div></div>
            <div class="progress realmeter progress-danger"><div id="tx_peak_right_mbar" class="bar" style="width:0%;"></div></div>
            <br/>
          </div>
          <div id="tx_not_running" class="meterhidden alert alert-info">
            <p>Transmitter not active - run <code>python tx.py</code> to start this node's transmitter</p>
          </div>
          <h3>Receiver</h3>
          <div id="rx_meters" class="meterbridge">
            <div class="meter">
              RMS L <div class="meter_value" id="rx_rms_left_meter"></div><span class="spark" id="rx_rms_left"></span>
            </div>
            <div class="meter">
              RMS R <div class="meter_value" id="rx_rms_right_meter"></div><span class="spark" id="rx_rms_right"></span>
            </div>
            <div class="progress realmeter progress-success"><div id="rx_rms_left_mbar" class="bar" style="width:0%;"></div></div>
            <div class="progress realmeter progress-danger"><div id="rx_rms_right_mbar" class="bar" style="width:0%;"></div></div>
            <div class="meter">
              Peak L <div class="meter_value" id="rx_peak_left_meter"></div><span class="spark" id="rx_peak_left"></span>
            </div>
            <div class="meter">
              Peak R <div class="meter_value" id="rx_peak_right_meter"></div><span class="spark" id="rx_peak_right"></span>
            </div>
            <div class="linkparams">
              <h6>Incoming Stream Parameters</h6>
              Depayloading content with <span class="label" id="rx_depayloader_name"></span> and decoding with <span class="label" id="rx_decoder_name"></span>
              <div class="caps" id="rx_caps"></div>
            </div>
            <div class="progress realmeter progress-success"><div id="rx_peak_left_mbar" class="bar" style="width:0%;"></div></div>
            <div class="progress realmeter progress-danger"><div id="rx_peak_right_mbar" class="bar" style="width:0%;"></div></div>
            <br/>
          </div>
          <div id="rx_not_running" class="meterhidden alert alert-info">
            <p>Receiver not active or matching transmitter not running - run <code>python rx.py</code> to start this node's receiver, <code>python tx.py</code> on the transmitter, and ensure that both configuration names are identical - this node is listening for <code>${static_conf['tx']['configuration_name']}</code>.</p>
            <p>You may need to open incoming ports on this computer for the configuration. Check the base port on the transmitter to find out which ports.</p>
          </div>
          <p>All meters scaled between 0 and -40dBFS as reported by TX/RX nodes.</p>
        </div>
        <form action="/save" method="POST">
          <div id="tx-params">
            <h1>Transmission Parameters</h1>
            <div class="parameter">
              <strong>Receiver Address</strong>
              <input type="text" name="tx_receiver_address" value="${static_conf['tx']['receiver_address']}" />
              <p class="help">The address this system will be transmitting to, either an IP address or a hostname.</p>
            </div>
            <div class="parameter">
              <strong>Link Name</strong>
              <input type="text" name="tx_configuration_name" value="${static_conf['tx']['configuration_name']}" />
              <p class="help">The name of the link configuration. Identifies this link configuration on the configuration server. Must be configured identially at each end of the link.</p>
            </div>
            <div class="parameter">
              <strong>Audio Source</strong>
              <select name="tx_audio_connection">
                <option value="alsa" tal:condition="python: static_conf['tx']['audio_connection'] == 'alsa'" selected>ALSA</option>
                <option value="alsa" tal:condition="python: static_conf['tx']['audio_connection'] != 'alsa'">ALSA</option>
                <option value="jack" tal:condition="python: static_conf['tx']['audio_connection'] == 'jack'" selected>JACK</option>
                <option value="jack" tal:condition="python: static_conf['tx']['audio_connection'] != 'jack'">JACK</option>
                <option value="pulseaudio" tal:condition="python: static_conf['tx']['audio_connection'] == 'pulseaudio'" selected>PulseAudio</option>
                <option value="pulseaudio" tal:condition="python: static_conf['tx']['audio_connection'] != 'pulseaudio'">PulseAudio</option>
              </select>
              <p class="help">The audio source. For JACK, the server must be started before the link is started. The link will connect to the first available source ports. PulseAudio is for development only, and is not recommended for production use</p>
            </div>
            <div class="parameter">
              <strong>ALSA Device</strong>
              <input type="text" name="tx_alsa_device" value="${static_conf['tx']['alsa_device']}" />
              <p class="help">If ALSA is used above, this is the sound card the ALSA client will be connected to.</p>
            </div>
            <div class="parameter">
              <strong>Encoder Bitrate</strong>
              <input type="text" name="tx_bitrate" value="${static_conf['tx']['bitrate']/1000}" /> kbit/s
              <p class="help">The bitrate of the encoder used in the link, if one is used. Not used in Linear PCM mode.</p>
            </div>
            <div class="parameter">
              <strong>Base Port</strong>
              <input type="text" name="tx_base_port" value="${static_conf['tx']['base_port']}" />
              <p class="help">The base port used in this link. With the current setting, ports ${static_conf['tx']['base_port']} (UDP) and ${int(static_conf['tx']['base_port'])+1} (UDP) must both be open on the receiver, and port ${int(static_conf['tx']['base_port'])+2} (UDP) should be open on the transmitter if possible.</p>
            </div>
            <div class="parameter">
              <strong>Link Mode</strong>
              <select name="tx_link_mode">
                <option value="celt" tal:condition="python: static_conf['tx']['payloader']['tx'] == 'rtpceltpay'" selected>CELT</option>
                <option value="pcm" tal:condition="python: static_conf['tx']['payloader']['tx'] == 'rtpL16pay'" selected>16-bit PCM (Little Endian)</option>
                <option value="celt" tal:condition="python: static_conf['tx']['payloader']['tx'] != 'rtpceltpay'">CELT</option>
                <option value="pcm" tal:condition="python: static_conf['tx']['payloader']['tx'] != 'rtpL16pay'">16-bit PCM (Little Endian)</option>
              </select>
              <p class="help">The link mode sets the encoder, payloader, depayloader and decoders used in the link.</p>
            </div>
          </div>
          <div id="rx-params">
            <h1>Receiver Parameters</h1>
            <p>These settings configure how this node acts as a receiver. Link settings for any links directed to this node are specified by the transmitting node.</p>
            <div class="parameter">
              <strong>Configuration Name</strong>
              <input type="text" name="rx_configuration_name" value="${static_conf['rx']['configuration_name']}" />
              <p class="help">The name of the link configuration to receive. Must be set to the same value as the transmitter you want to receive, which must be configured to send to this system's IP address.</p>
            </div>
            <div class="parameter">
              <strong>Audio Output Type</strong>
              <select name="rx_audio_connection">
                <option value="alsa" tal:condition="python: static_conf['rx']['audio_connection'] == 'alsa'" selected>ALSA</option>
                <option value="alsa" tal:condition="python: static_conf['rx']['audio_connection'] != 'alsa'">ALSA</option>
                <option value="jack" tal:condition="python: static_conf['rx']['audio_connection'] == 'jack'" selected>JACK</option>
                <option value="jack" tal:condition="python: static_conf['rx']['audio_connection'] != 'jack'">JACK</option>
                <option value="pulseaudio" tal:condition="python: static_conf['rx']['audio_connection'] == 'pulseaudio'" selected>PulseAudio</option>
                <option value="pulseaudio" tal:condition="python: static_conf['rx']['audio_connection'] != 'pulseaudio'">PulseAudio</option>
              </select>
              <p class="help">The audio source. For JACK, the server must be started before the link is started. The link will connect to the first available source ports. PulseAudio is for development only, and is not recommended for production use</p>
            </div>
            <div class="parameter">
              <strong>ALSA Device</strong>
              <input type="text" name="rx_alsa_device" value="${static_conf['rx']['alsa_device']}" />
              <p class="help">If ALSA is used above, this is the sound card the ALSA client will be connected to.</p>
            </div>
          </div>
          <div style="padding:10px;">
            <a id="save-button" href="#" onclick="$('#save-panel').show();$('#save-button').hide();return false;" class="btn-primary btn-large">Save Options</a>
            <div id="save-panel" class="alert alert-error" style="display:none;">
              <p><strong>Warning</strong> - saving parameters does not perform a link reload. You must restart each end of the link to apply changes.</p>
              <p>You will disrupt audio by reloading the link. Saving changes will not disrupt audio but may affect automatic link recovery in the event of a crash. Reload your link immediately after saving to test your new parameters.</p>
              <input type="submit" value="Confirm Save" class="btn-danger btn-large" />
            </div>
          </div>
        </form>
      </div>
    </div>
    <div id="footer">
      <a href="https://github.com/JamesHarrison/openob">Open Outside Broadcast</a> - Web Interface - BETA
    </div>
    <script type="text/javascript">
      $(function () {
        $('#tx_meters').hide();
        $('#rx_meters').hide();
        $('#tx_not_running').show();
        $('#rx_not_running').show();
        function update() {
          var now = (new Date().getTime() / 1000)-3;
          $.get("/tx_levels.json",function(data){
            if (now < data['timestamp']) {
              $('#tx_meters').show();
              $('#tx_not_running').hide();
              var lopts = {'type':'bar', 'barWidth':1, 'height':'90px', 'chartRangeMin':-40.0, 'chartRangeMax':0.0, 'barSpacing':0, 'negBarColor':'#5cb65e'};
              var ropts = {'type':'bar', 'barWidth':1, 'height':'90px', 'chartRangeMin':-40.0, 'chartRangeMax':0.0, 'barSpacing':0, 'negBarColor':'#d34a44'};
              $('#tx_rms_left').sparkline(data['rms_left'],lopts);
              $('#tx_rms_left_mbar').css('width',(-2*data['rms_left'][0]+'%'));
              $('#tx_rms_right_mbar').css('width',(-2*data['rms_right'][0]+'%'));
              $('#tx_peak_left_mbar').css('width',(-2*data['peak_left'][0]+'%'));
              $('#tx_peak_right_mbar').css('width',(-2*data['peak_right'][0]+'%'));
              $('#tx_rms_right').sparkline(data['rms_right'],ropts);
              $('#tx_peak_left').sparkline(data['peak_left'],lopts);
              $('#tx_peak_right').sparkline(data['peak_right'],ropts);
              $('#tx_rms_left_meter').text(Math.round(data['rms_left'][0]*10)/10);
              $('#tx_rms_right_meter').text(Math.round(data['rms_right'][0]*10)/10);
              $('#tx_peak_left_meter').text(Math.round(data['peak_left'][0]*10)/10);
              $('#tx_peak_right_meter').text(Math.round(data['peak_right'][0]*10)/10);
            } else {
              $('#tx_meters').hide();
              $('#tx_not_running').show();
            }
          }, "json");
          $.get("/rx_levels.json",function(data){
            if (now < data['timestamp']) {
              $('#rx_meters').show();
              $('#rx_not_running').hide();
              var lopts = {'type':'bar', 'barWidth':1, 'height':'90px', 'chartRangeMin':-40.0, 'chartRangeMax':0.0, 'barSpacing':0, 'negBarColor':'#5cb65e'};
              var ropts = {'type':'bar', 'barWidth':1, 'height':'90px', 'chartRangeMin':-40.0, 'chartRangeMax':0.0, 'barSpacing':0, 'negBarColor':'#d34a44'};
              $('#rx_rms_left_mbar').css('width',(-2*data['rms_left'][0]+'%'));
              $('#rx_rms_right_mbar').css('width',(-2*data['rms_right'][0]+'%'));
              $('#rx_peak_left_mbar').css('width',(-2*data['peak_left'][0]+'%'));
              $('#rx_peak_right_mbar').css('width',(-2*data['peak_right'][0]+'%'));
              $('#rx_rms_left').sparkline(data['rms_left'],lopts);
              $('#rx_rms_right').sparkline(data['rms_right'],ropts);
              $('#rx_peak_left').sparkline(data['peak_left'],lopts);
              $('#rx_peak_right').sparkline(data['peak_right'],ropts);
              $('#rx_rms_left_meter').text(Math.round(data['rms_left'][0]*10)/10);
              $('#rx_rms_right_meter').text(Math.round(data['rms_right'][0]*10)/10);
              $('#rx_peak_left_meter').text(Math.round(data['peak_left'][0]*10)/10);
              $('#rx_peak_right_meter').text(Math.round(data['peak_right'][0]*10)/10);
              $('#rx_caps').text(data['caps']);
              $('#rx_depayloader_name').text(data['depayloader_name']);
              $('#rx_decoder_name').text(data['decoder_name']);
            } else {
              $('#rx_meters').hide();
              $('#rx_not_running').show();
            }
          }, "json");
          
          setTimeout(update, 1000);
        }

        update();
      });
    </script>
  </body>
</html>
