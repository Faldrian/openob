{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"The Open Outside Broadcast project for low-latency high-reliability broadcast audio","name":"OpenOB","google":"","body":"## Welcome to OpenOB\r\n\r\nThe OpenOB project is a fast and simple way to get audio from A to B at high quality with excellent reliability and low latency. It is designed for broadcast use, such as for links from outside broadcast units to contribution units in the studio, or for getting audio from your studio to an FM, AM or DAB transmission site. \r\n\r\nIt aims to provide a feature-equivalent system comparable to commercial IP codecs, with equivalent or better quality than available commercial units.\r\n\r\n## Getting Started\r\n\r\nSetting up an audio link is really simple. On an Ubuntu box (running, say, Ubuntu Studio 12.04), the following commands will get you up and running.\r\n\r\n```\r\n# install dependencies (for Ubuntu, omit gstreamer0.10-plugins-bad-multiverse on Debian/Raspbian): \r\nsudo apt-get install git python-gst0.10 python-redis \\\r\n  gstreamer0.10-plugins-base gstreamer0.10-plugins-bad \\\r\n  gstreamer0.10-plugins-bad-multiverse gstreamer0.10-plugins-good \\\r\n  gstreamer0.10-plugins-ugly gstreamer0.10-tools \\\r\n  python-gobject python-gobject-2 gstreamer0.10-alsa \r\n# only required on one end, typically the receiving system\r\nsudo apt-get install redis-server\r\n# now grab openob\r\ngit clone git://github.com/JamesHarrison/openob.git\r\ncd openob\r\n```\r\n\r\nConfiguration of links is done on the command line, to ease integration with monitoring systems like god or monit and quick reconfiguration.\r\n\r\nThere are two subcommands, rx and tx for receiver and transmitter respectively, each with their own options. \r\n\r\n```\r\n# For transmitter help\r\npython openob-manager.py localhost name tx -h\r\nusage: openob-manager config_host link_name tx [-h]\r\n                                               [-a {alsa,jack,pulseaudio}]\r\n                                               [-d DEVICE] [-e {pcm,celt}]\r\n                                               [-b {16,24,32,48,64,96,128}]\r\n                                               [-p PORT] [-j JITTER_BUFFER]\r\n                                               receiver_host\r\n\r\npositional arguments:\r\n  receiver_host         The receiver for this transmitter. The machine at this\r\n                        address must be running an rx-mode Manager for this\r\n                        link name\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -a {alsa,jack,pulseaudio}, --audio_input {alsa,jack,pulseaudio}\r\n                        The audio source type for this end of the link\r\n  -d DEVICE, --device DEVICE\r\n                        The ALSA audio device when in ALSA audio input mode\r\n  -e {pcm,celt,opus}, --encoding {pcm,celt,opus}\r\n                        The audio encoding type for this link; PCM for linear\r\n                        audio (16-bit), CELT/Opus (default) for encoded audio\r\n  -b {16,24,32,48,64,96,128}, --bitrate {16,24,32,48,64,96,128}\r\n                        Bitrate if using CELT (in kbit/s)\r\n  -p PORT, --port PORT  The base port to use for audio transport. This port\r\n                        must be accessible on the receiving host\r\n  -j JITTER_BUFFER, --jitter_buffer JITTER_BUFFER\r\n                        The size of the jitter buffer in milliseconds. Affects\r\n                        latency; may be reduced to 5-10ms on fast reliable\r\n                        networks, or increased for poor networks like 3G\r\n\r\n# For receiver help\r\npython openob-manager.py localhost name rx -h\r\nusage: openob-manager config_host link_name rx [-h]\r\n                                               [-a {alsa,jack,pulseaudio}]\r\n                                               [-d DEVICE]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -a {alsa,jack,pulseaudio}, --audio_output {alsa,jack,pulseaudio}\r\n                        The audio output type for this end of the link\r\n  -d DEVICE, --device DEVICE\r\n                        The ALSA audio device when in ALSA audio output mode\r\n\r\n```\r\n\r\nAs a minimal configuration you should be able to run the following (assuming you can access your sound cards via ALSA; typically this entails membership of the 'audio' group):\r\n\r\n```\r\n# On the transmitter (append -e celt or -e pcm for machines without Opus)\r\npython openob-manager.py confighost test-link tx b-hostname -e celt\r\n# On the receiver\r\npython openob-manager.py confighost test-link rx\r\n```\r\n\r\nAnd you should have audio going from A to B! The links will try and keep themselves alive at all costs, and will report any issues to stdout/stderr. If the above doesn't work make sure your firewall is configured properly.\r\n\r\n## What can it do?\r\n\r\nOpenOB can be used for speech or music content with Opus, CELT or PCM modes (PCM is effectively completely transparent, and suitable for feeding processors and encoders). You can run bidirectional links with a single install, and with multiple installs, you can run multiple transmission or receiver links on the same computer (using multiple sound cards or the JACK audio server), letting you use a single machine for contribution links from multiple sources. You can run links over mobile phone connections using Opus or CELT at low bitrates and a decent jitter buffer with acceptable quality for on-air usage, even for music content. Opus features *forward error correction* and *packet loss concealment* making it particularly powerful for mobile links.\r\n\r\n### What can't it do?\r\n\r\nMake you a nice mug of tea at 4AM after a late night at the studio repairing things. Sorry. This feature is slated for a future release.\r\n\r\nAutomatic bandwidth flexing and discontinuous transmission modes for Opus are planned, along with a graphical user interface and better management of links.\r\n\r\n## State of the Project\r\n\r\nThe project is being actively developed but is considered stable for production usage.\r\n\r\nThe project is in active use; it's used at [Insanity Radio 103.2 FM](http://insanityradio.com/) for a studio-transmitter link, and for outside broadcast contribution links. It is reliable and works well when managed carefully, but isn't quite yet idiot-proof.\r\n\r\nIt is being developed further by me (James Harrison) in my spare time.\r\n\r\n### Technical Notes\r\n\r\nThe project uses the Real Time Protocol combined with either the Opus or CELT low-latency audio codec or straightforward PCM 16-bit packetizing. In the Opus or CELT modes, latency is as low as 10 milliseconds. In PCM mode, the link is as low-latency as your sound cards. This assumes a perfect network - a jitter buffer is usually required, of 5-10 milliseconds on most complex networks.\r\n\r\nThe core of the project uses the GStreamer framework for handling audio; Python is used for controlling GStreamer pipelines and monitoring things, along with the web interface.\r\n\r\n### Gotchas\r\n\r\nVersions of GStreamer and codecs can vary significantly between OS versions; for fewer headaches, install the same operating system on both ends and same versions of packages. This should not be an issue now Opus is standardized but CELT can still vary.\r\n\r\n## The To-Do List\r\n\r\n* Package up as a Python package so installation can be reduced to ``easy_install openob``\r\n* Package as a Debian package\r\n* Write some tests to verify behaviour of links\r\n* Improve support of multiple sound cards/JACK client management\r\n* Measure end to end latency with a decent sound card (prerequisite: someone buys me two decent sound cards and lends me an audio analyser)\r\n\r\n## Real-World Users\r\n\r\nThis list is new; if you're using OpenOB in the real world (or testing/developing with it/evaluating it), let me know so you can be added to the list (or just add yourself in a fork and throw in a pull request).\r\n\r\n* [Insanity Radio 103.2 FM (UK Community Radio)](http://insanityradio.com) - Studio-Transmitter Link for FM, outside broadcasts from events\r\n\r\n## Credits\r\n\r\nOpenOB was developed by James Harrison for Insanity Radio. I couldn't have figured out a lot of stuff about how to get GStreamer and Python talking without some sample code from Alexandre Bourget. And of course, the GStreamer guys rock for managing to develop such an amazing toolkit for us developers."}