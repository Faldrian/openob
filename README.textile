h1. Welcome to OpenOB

OpenOB is a set of simple scripts that use the GStreamer framework to transport audio easily from one computer to another with minimal delay and good quality.

It is intended to allow professional broadcasters to avoid expensive 'codec' hardware, which is typically costed based on quality - you pay a premium for better quality or lower latencies. OpenOB supports CELT, a high-quality efficient low-latency codec, and allows you to run all of this off commodity computer hardware at much much lower cost, lowering the bar to entry for broadcasters, allowing professional quality contribution links to be set up with nothing more than an entry-level computer at each end.

The OpenOB project also provides various helper scripts for other scenarios, like compatibility with commercial sender hardware like Barix/Sonifex Instreamer/PS-SEND streamers.

h2. Development Status

OpenOB is strictly in the speculative and experimental phase right now. If you use it for _anything_, you're insane. You have been warned. It's a massive hack but has been used for a few gigs.

That said, feedback from early adopters is always welcomed with open ears.

h2. Basic Terms and Assumptions

You want to get audio from A to B. A will source audio from a sound card. B will play audio out on a sound card.

A and B are both Linux machines, optionally with sound cards that provide balanced analogue I/O or AES digital I/O (AudioScience or RME Hammerfall etc- anything ALSA groks).

A is called the contribution system, B is the endpoint system.

You have limited to no control over the network between A and B; we assume limited bandwidth and potential packet loss.

B is network-accessible from the outside world (or at the least A) on a few ports. A is almost certainly unreachable from B.

h2. How it works/what's under the hood

OpenOB consists of an rx script and a tx script. The rx (receiver) script runs on the endpoint along with a Redis server. The tx (transmission) script runs on the contribution machine.

The underlying audio link uses the CELT codec to encode audio. This is a codec equally suited to music as it is to speech, and which is very bandwidth efficient, allowing good quality links at as low as 32kbps with very high quality links at 96kbps and above. It's also patent-free and unencumbered.

The transport is the Real Time Protocol, using UDP datagrams to move audio around. OpenOB also supports RTCP and the RTCP Sender Report protocol, though only at the gstreamer level.

Audio level monitoring is provided via simple printouts at each end for easy debugging. Network failures are recovered from automatically.

Configuration is done on the transmitter, which sends the audio stream caps needed to decode the audio to the redis server. The receiver configures itself from the redis server upon an incoming connection. This allows for contributors to change their bandwidth or other link parameters without needing to reconfigure the receiver.

Latency is by default configured limited on jitter buffer size with a 150ms buffer, which works well on congested switched networks with no QoS. 50ms and lower are possible on suitable hardware with a suitable connection.

h2. Usage/Installation

Grab the scripts, put tx.py on the transmitter/contribution machine, rx.py on the receiver/endpoint, set up Redis on a host both can access (usually the receiver/endpoint) and adjust the hostnames and ports in the script to suit. You'll have to open your firewall up appropriately- at a minimum, one port for Redis, one port for RTP.

Run the rx with python rx.py, run the tx with python tx.py.

h2. Dependencies

* Linux (Ubuntu Server/Desktop tested)
* gstreamer 0.10 plus plugins (alsa, celt and rtp pads required)
* Python
* Python gstreamer bindings
* Python redis bindings
* Python gobject bindings
* Redis server (on the receiver only)
