h1. OpenOB

OpenOB (Open Outside Broadcast) is a simple Python/GStreamer based application which implements a highly configurable RTP-based audio link system.

It is intended to allow professional broadcasters to avoid expensive 'codec' hardware, which is typically costed based on quality - you pay a premium for better quality or lower latencies. OpenOB supports Opus, a high-quality efficient low-latency codec, and allows you to run all of this off commodity computer hardware at much much lower cost, lowering the bar to entry for broadcasters, allowing professional quality contribution links to be set up with nothing more than an entry-level computer at each end.

While outside broadcast contribution links are the primary use-case, the system is also usable for other tasks requiring a high-reliability audio link, such as studio-studio links and studio-transmitter links.

h2. Development Status

OpenOB is stable and suitable for production usage.

If you intend to put it into production, test thoroughly before doing so, as with any other system you might deploy.

h2. Technical Information

OpenOB is a single program which can be run as a transmitter or receiver. It is configured by command-line options.

By default the Opus codec is used for audio transport. This is a codec equally suited to music as it is to speech, and which is very bandwidth efficient, allowing good quality links at as low as 16 or 32kbps with very high quality links at 96kbps and above. It's also patent-free and unencumbered. Opus' predecessor, CELT, is also available for legacy systems.

Additionally, OpenOB can move raw little-endian PCM 16-bit audio around, allowing for entirely transparent lossless audio links for studio-transmitter links or OBs where a high quality link is available.

The actual network protocol used to move audio is the Real Time Protocol. OpenOB also supports RTCP and the RTCP Sender Report protocol, though only at the gstreamer level - nothing currently makes use of RTCP SRs within OpenOB itself.

Audio level monitoring is provided via simple printouts at each end for easy debugging. Network failures are recovered from automatically. Level monitoring of each end along with timestamps are provided bidirectionally for debugging and monitoring, so you can easily see what's going on at each end.

Latency is by default configured limited on jitter buffer size with a 150ms buffer, which works well on congested switched networks with no QoS. 10ms and lower are possible on suitable hardware with a suitable connection.

h2. Usage/Installation

Install OpenOB from git or a tarball/zip download. You will need to configure your firewall appropriately on the receiving host:

* Redis - port 6379 TCP (only needed on the end hosting your configuration)
* RTP - port 3000 UDP - the base port for communications, configurable (receiver)

The base port can be changed with the -p flag.

To install dependencies on an Ubuntu box you can run the following:

<pre>sudo apt-get install python-gst0.10 python-setuptools gstreamer0.10-plugins-base gstreamer0.10-plugins-bad \ 
  gstreamer0.10-plugins-bad-multiverse gstreamer0.10-plugins-good gstreamer0.10-plugins-ugly \
gstreamer0.10-ffmpeg gstreamer0.10-tools python-gobject python-gobject-2 gstreamer0.10-alsa </pre>

You'll need two Python libraries; on 12.04 these can be fetched as packages but prior versions need the latest versions, so use easy_install (installed with python-setuptools above):

<pre>sudo easy_install redis;sudo easy_install argparse</pre>

On Debian Wheezy and later you should be able to just run the following:

<pre>sudo apt-get install python-gst0.10 python-setuptools gstreamer0.10-plugins-base gstreamer0.10-plugins-bad \ 
  gstreamer0.10-plugins-good gstreamer0.10-plugins-ugly gstreamer0.10-ffmpeg gstreamer0.10-tools \
python-gobject python-gobject-2 gstreamer0.10-alsa python-redis python-argparse </pre>


You will also need to install Redis on a machine - it does not need to be on the receiver or transmitter, but the receiver machine is probably where you want to put it.
 
<pre>sudo apt-get install redis-server</pre>

You then need to edit /etc/redis/redis.conf and instruct redis to bind to your external IP address or 0.0.0.0, then restart redis.

You can now run OpenOB. @python openob-manager -h@ will list help; @python openob-manager dummyhost someconfig rx -h@ will give help for the receiver mode, for instance.

<pre>usage: openob-manager config_host link_name tx [-h]
                                               [-a {alsa,jack,pulseaudio}]
                                               [-d DEVICE] [-e {pcm,celt,opus}]
                                               [-b {16,24,32,48,64,96,128,192,256,384}]
                                               [-p PORT] [-j JITTER_BUFFER]
                                               receiver_host

positional arguments:
  receiver_host         The receiver for this transmitter. The machine at this
                        address must be running an rx-mode Manager for this
                        link name

optional arguments:
  -h, --help            show this help message and exit
  -a {alsa,jack,pulseaudio}, --audio_input {alsa,jack,pulseaudio}
                        The audio source type for this end of the link
  -d DEVICE, --device DEVICE
                        The ALSA audio device when in ALSA audio input mode
  -e {pcm,celt,opus}, --encoding {pcm,celt,opus}
                        The audio encoding type for this link; PCM for linear
                        audio (16-bit), CELT or Opus (default) for encoded audio
  -b {16,24,32,48,64,96,128,192,256,384}, --bitrate {16,24,32,48,64,96,128,192,256,384}
                        Bitrate if using CELT/Opus (in kbit/s)
  -p PORT, --port PORT  The base port to use for audio transport. This port
                        must be accessible on the receiving host
  -j JITTER_BUFFER, --jitter_buffer JITTER_BUFFER
                        The size of the jitter buffer in milliseconds. Affects
                        latency; may be reduced to 5-10ms on fast reliable
                        networks, or increased for poor networks like 3G
</pre>

<pre>usage: openob-manager config_host link_name rx [-h]
                                               [-a {alsa,jack,pulseaudio}]
                                               [-d DEVICE]

optional arguments:
  -h, --help            show this help message and exit
  -a {alsa,jack,pulseaudio}, --audio_output {alsa,jack,pulseaudio}
                        The audio output type for this end of the link
  -d DEVICE, --device DEVICE
                        The ALSA audio device when in ALSA audio output mode
</pre>

h2. Dependencies

* Linux (Ubuntu Server/Desktop tested)
* gstreamer 0.10, plus plugins (alsasrc/jackaudiosrc, celtenc and rtpceltpay/rtpL16pay bins required - install good, bad and ugly packages, plus any gstreamer-alsa packages for your distro)
* Python 2.7 or lower (3.x not supported yet)
* Python gstreamer bindings
* Python redis bindings
* Python gobject bindings
* JACK server (optionally, ALSA is fine though)
* Redis server (only needed on the configuration server, usually configured on the receiver)

h2. Troubleshooting

h3. Redis Unreachable

<pre> -- Unable to configure myself from the configuration host; has the transmitter been started yet? (Error 111 connecting some-address:6379. Connection refused.)</pre>

This tends to mean your RX can't talk to Redis. Check you've edited /etc/redis/redis.conf to either comment out the bind 127.0.0.1 default or set bind to your public IP, then restart Redis. You may also have a firewall issue - ensure TCP port 6379 is open.


h2. Real-World Users

This list is new; if you're using OpenOB in the real world (or testing/developing with it/evaluating it), let me know so you can be added to the list (or just add yourself in a fork and throw in a pull request).

* "Insanity Radio 103.2FM":http://insanityradio.com/ - Studio-Transmitter Link for FM, outside broadcasts from events

h2. Licensing and Credits

OpenOB was developed by James Harrison, with chunks of example code used from Alexandre Bourget and various other GStreamer documentation sites such as the PyGST manual.

Copyright (c) 2012, James Harrison

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following  conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the OpenOB project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JAMES HARRISON OR OTHER OPENOB CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.