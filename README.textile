h1. OpenOB

OpenOB (Open Outside Broadcast) is a simple Python/GStreamer based application which implements a highly configurable RTP-based audio link system.

It is intended to allow professional broadcasters to avoid expensive 'codec' hardware, which is typically costed based on quality - you pay a premium for better quality or lower latencies. OpenOB supports CELT, a high-quality efficient low-latency codec, and allows you to run all of this off commodity computer hardware at much much lower cost, lowering the bar to entry for broadcasters, allowing professional quality contribution links to be set up with nothing more than an entry-level computer at each end.

While outside broadcast contribution links are the primary use-case, the system is also usable for other tasks requiring a high-reliability audio link, such as studio-studio links and studio-transmitter links.

h2. Development Status

OpenOB is in active use at at least one community radio station and should be reliable for most use cases, but it has not been tested particularly thoroughly.

If you intend to put it into production, test thoroughly before doing so.

h2. Technical Information

OpenOB consists of an rx (receiver) script and a tx (transmitter) script. The rx script runs on a computer at your studio (for OBs) or transmitter site (STLs). The tx (transmission) script runs on a computer at the event (OBs) or your studio (STLs).

Configuration is done via a simple YAML configuration file. The receiver is configured with the name of the link to receive and the sound card information. The transmitter handles all configuration related to the link, and communicates this information to the receiver via a Redis server (usually run on the receiver). This permits reconfiguration of a link remotely.

By default the CELT codec is used for audio transport. This is a codec equally suited to music as it is to speech, and which is very bandwidth efficient, allowing good quality links at as low as 32kbps with very high quality links at 96kbps and above. It's also patent-free and unencumbered.

Additionally, OpenOB can move raw little-endian PCM 16-bit audio around, allowing for entirely transparent lossless audio links for studio-transmitter links or OBs where a high quality link is available.

The actual network protocol used to move audio is the Real Time Protocol. OpenOB also supports RTCP and the RTCP Sender Report protocol, though only at the gstreamer level - nothing currently makes use of RTCP SRs within the programs.

Audio level monitoring is provided via simple printouts at each end for easy debugging. Network failures are recovered from automatically. Level monitoring of each end along with timestamps are provided bidirectionally for debugging and monitoring, so you can easily see what's going on at each end.

Latency is by default configured limited on jitter buffer size with a 250ms buffer, which works well on congested switched networks with no QoS. 50ms and lower are possible on suitable hardware with a suitable connection.

h2. Usage/Installation

Grab the scripts, put tx.py on the transmitter/contribution machine, rx.py on the receiver/endpoint, set up Redis on a host both can access (usually the receiver/endpoint). You'll have to open your firewall up appropriately- at a minimum, one port for Redis, three ports for RTP:

* Redis - port 6379 TCP (only needed on the end hosting your configuration)
* RTP - port 3000 UDP - the base port for communications, configurable (receiver)
* RTCP - port 3001 UDP - base port plus one (receiver)
* RTCP Sender Reports - port 3002 UDP - base port plus two (transmitter)

To install dependencies on an Ubuntu box you can run the following:

<pre>sudo apt-get install python-gst0.10 python-serial python-redis python-yaml gstreamer0.10-plugins-base  \
gstreamer0.10-plugins-bad gstreamer0.10-plugins-bad-multiverse gstreamer0.10-plugins-good gstreamer0.10-plugins-ugly \
gstreamer0.10-ffmpeg gstreamer0.10-tools python-gobject python-gobject-2 gstreamer0.10-alsa </pre>

You will also need to install Redis on one end:
 
<pre>sudo apt-get install redis-server</pre>

You then need to edit /etc/redis/redis.conf and instruct redis to bind to your external IP address or 0.0.0.0.

Copy config.yml.example to config.yml and configure it - at a minimum change configuration_host and receiver_address. Read through and understand what the options do, though.

Run OpenOB in RX mode with @python rx.py@ or in TX mode with @python tx.py@. Both modes can be run on a single machine simultaneously so long as ports and configuration names differ, allowing for bidirectional links, or relay links.

h3. Web Interface

OpenOB also has a (very early stage) web interface that at present allows you to view the configuration and to monitor levels and status of running links with pretty automatically updating graphs and meters.

To install it (on Ubuntu):

<pre>sudo apt-get install python-setuptools
sudo easy_install pyramid</pre>

And to run it:

<pre>cd webui
python setup.py develop
pserve development.ini</pre>

This will be streamlined in future releases, with tighter integration, as the webUI becomes the main method for configuring and monitoring links.

h2. Dependencies

* Linux (Ubuntu Server/Desktop tested)
* gstreamer 0.10, plus plugins (alsasrc/jackaudiosrc, celtenc and rtpceltpay/rtpL16pay bins required - install good, bad and ugly packages, plus any gstreamer-alsa packages for your distro)
* Python 2.7 or lower (3.x not supported yet)
* Python gstreamer bindings
* Python redis bindings
* Python gobject bindings
* Python yaml bindings
* JACK server (optionally, ALSA is fine though)
* Redis server (only needed on the configuration server, usually configured on the receiver)

If you want the WebUI:

* Python setuptools (easy_install)
* Pyramid web framework (easy_install pyramid)

h2. Licensing and Credits

OpenOB was developed by James Harrison, with chunks of example code used from Alexandre Bourget and various other GStreamer documentation sites such as the PyGST manual.

Copyright (c) 2012, James Harrison

All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following  conditions are met:
    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
    * Neither the name of the OpenOB project nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL JAMES HARRISON OR OTHER OPENOB CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.